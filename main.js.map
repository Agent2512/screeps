{"version":3,"file":"main.js","sources":["src/Harvester.ts","src/main.ts"],"sourcesContent":["export function Harvester(creep:Creep) {\r\n    if (creep.store.energy == 0) {\r\n        creep.memory.working = false;\r\n    }\r\n    else if (creep.store.energy == creep.store.getCapacity()) {\r\n        creep.memory.working = true;\r\n    }\r\n\r\n    if (creep.memory.working == false) {\r\n        harvest(creep);\r\n    }\r\n    else {\r\n        transfer(creep);\r\n    }\r\n}\r\n\r\nexport const harvest = function (creep:Creep) {\r\n    const source = creep.pos.findClosestByPath(FIND_SOURCES);\r\n        if (source) {\r\n            if (creep.pos.inRangeTo(source, 1)) {\r\n                creep.harvest(source);\r\n            }\r\n            else {\r\n                creep.moveTo(source);\r\n            }\r\n        }\r\n}\r\n\r\n\r\n\r\nexport const transfer = (creep:Creep) =>  {\r\n    const target = creep.pos.findClosestByPath(FIND_STRUCTURES, {\r\n        filter: (structure) => {\r\n            return (\r\n                structure.structureType == STRUCTURE_EXTENSION ||\r\n                structure.structureType == STRUCTURE_SPAWN ||\r\n                structure.structureType == STRUCTURE_TOWER\r\n            )\r\n            && structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0;\r\n        }\r\n    });\r\n    if (target && creep.transfer(target, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n        creep.moveTo(target);\r\n    }\r\n}\r\n","import {Harvester} from 'Harvester';\r\n\r\nconst spawns = Game.spawns;\r\nconst creeps = Game.creeps;\r\n\r\ninterface CreepMemory {\r\n    role: string;\r\n    working: boolean;\r\n}\r\n\r\nconst roles = {\r\n    harvester: Harvester\r\n}\r\n\r\nmodule.exports.loop = function () {\r\n\r\n    for (const creepName in creeps) {\r\n        const creep = creeps[creepName];\r\n        if (creep.memory.role == 'harvester') {\r\n            Harvester(creep);\r\n        }\r\n    }\r\n}\r\n\r\n"],"names":[],"mappings":";;AAAM,SAAU,SAAS,CAAC,KAAW,EAAA;AACjC,IAAA,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE;AACzB,QAAA,KAAK,CAAC,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;AAChC,KAAA;AACI,SAAA,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE;AACtD,QAAA,KAAK,CAAC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;AAC/B,KAAA;AAED,IAAA,IAAI,KAAK,CAAC,MAAM,CAAC,OAAO,IAAI,KAAK,EAAE;QAC/B,OAAO,CAAC,KAAK,CAAC,CAAC;AAClB,KAAA;AACI,SAAA;QACD,QAAQ,CAAC,KAAK,CAAC,CAAC;AACnB,KAAA;AACL,CAAC;AAEM,MAAM,OAAO,GAAG,UAAU,KAAW,EAAA;IACxC,MAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;AACrD,IAAA,IAAI,MAAM,EAAE;QACR,IAAI,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE;AAChC,YAAA,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACzB,SAAA;AACI,aAAA;AACD,YAAA,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AACxB,SAAA;AACJ,KAAA;AACT,CAAC,CAAA;AAIM,MAAM,QAAQ,GAAG,CAAC,KAAW,KAAI;IACpC,MAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,eAAe,EAAE;AACxD,QAAA,MAAM,EAAE,CAAC,SAAS,KAAI;AAClB,YAAA,OAAO,CACH,SAAS,CAAC,aAAa,IAAI,mBAAmB;gBAC9C,SAAS,CAAC,aAAa,IAAI,eAAe;AAC1C,gBAAA,SAAS,CAAC,aAAa,IAAI,eAAe;mBAE3C,SAAS,CAAC,KAAK,CAAC,eAAe,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;SAC3D;AACJ,KAAA,CAAC,CAAC;AACH,IAAA,IAAI,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,eAAe,CAAC,IAAI,gBAAgB,EAAE;AACvE,QAAA,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AACxB,KAAA;AACL,CAAC;;AC1Cc,IAAI,CAAC,OAAO;AAC3B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAW3B,MAAM,CAAC,OAAO,CAAC,IAAI,GAAG,YAAA;AAElB,IAAA,KAAK,MAAM,SAAS,IAAI,MAAM,EAAE;AAC5B,QAAA,MAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;AAChC,QAAA,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,IAAI,WAAW,EAAE;YAClC,SAAS,CAAC,KAAK,CAAC,CAAC;AACpB,SAAA;AACJ,KAAA;AACL,CAAC;;"}